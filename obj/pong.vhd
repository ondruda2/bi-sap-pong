-- File: obj/pong.vhd
-- Generated by MyHDL 0.11
-- Date: Tue May  5 12:05:58 2020


library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use std.textio.all;

use work.pck_myhdl_011.all;

entity pong is
    port (
        clk: in std_logic;
        reset: in std_logic;
        switches: in std_logic_vector(15 downto 0);
        outvsync: out std_logic;
        outhsync: out std_logic;
        outcolor: out std_logic
    );
end entity pong;


architecture MyHDL of pong is



signal switches_num: unsigned(15 downto 0);
signal y: unsigned(5 downto 0);
signal x: unsigned(6 downto 0);
signal vblank: std_logic;
signal pixclock_feedback: std_logic;
signal paddle_ry: unsigned(5 downto 0);
signal paddle_rai: std_logic;
signal paddle_ly: unsigned(5 downto 0);
signal paddle_lai: std_logic;
signal move_enable: std_logic;
signal lsfr: unsigned(7 downto 0);
signal hblank: std_logic;
signal colldone: std_logic;
signal bally: unsigned(6 downto 0);
signal ballx: unsigned(7 downto 0);
signal balldy: signed (1 downto 0);
signal balldx: signed (1 downto 0);

begin

switches_num <= unsigned(switches);



PONG_RANDOM: process (clk) is
begin
    if rising_edge(clk) then
        if (reset = '1') then
            lsfr <= to_unsigned(0, 8);
        else
            lsfr(8-1 downto 0) <= resize(lsfr(8-1 downto 1), 8);
            lsfr(7) <= ((((lsfr(7) xor lsfr(5)) xor lsfr(4)) xor lsfr(3)) xor '1');
        end if;
    end if;
end process PONG_RANDOM;

PONG_MAINLOOP: process (clk) is
    variable top: std_logic;
    variable bottom: std_logic;
    variable tx: unsigned(15 downto 0);
    variable ty: unsigned(15 downto 0);
    variable ball: std_logic;
    variable pt_ly: unsigned(15 downto 0);
    variable left: std_logic;
    variable pt_ry: unsigned(15 downto 0);
    variable right: std_logic;
    variable net: std_logic;
    variable lai: std_logic;
    variable rai: std_logic;
begin
    if rising_edge(clk) then
        if (reset = '1') then
            colldone <= '0';
            pixclock_feedback <= '0';
            vblank <= '0';
            paddle_lai <= '0';
            outvsync <= '0';
            outcolor <= '0';
            balldy <= to_signed(1, 2);
            ballx <= to_unsigned(50, 8);
            paddle_ry <= to_unsigned(25, 6);
            hblank <= '0';
            paddle_ly <= to_unsigned(25, 6);
            outhsync <= '0';
            paddle_rai <= '0';
            x <= to_unsigned(0, 7);
            bally <= to_unsigned(25, 7);
            y <= to_unsigned(0, 6);
            move_enable <= '0';
            balldx <= to_signed(-1, 2);
        else
            pixclock_feedback <= '0';
            move_enable <= '0';
            if True then
                x <= to_unsigned((x + 1), 7);
                if (x = 99) then
                    -- End horizontally visible
                    hblank <= '1';
                end if;
                if (x = 100) then
                    -- Begin hsync pulse
                    outhsync <= '1';
                end if;
                if (x = 103) then
                    -- End hsync pulse
                    outhsync <= '0';
                end if;
                if (x = 104) then
                    -- End line
                    -- Start horizontally visible
                    x <= to_unsigned(0, 7);
                    hblank <= '0';
                    y <= to_unsigned((y + 1), 6);
                    pixclock_feedback <= '1';
                    if (y = 49) then
                        -- End vertically visible
                        vblank <= '1';
                    end if;
                    if (y = 50) then
                        -- Begin vsync pulse
                        outvsync <= '1';
                    end if;
                    if (y = 53) then
                        -- End vsync pulse
                        outvsync <= '0';
                        move_enable <= '1';
                    end if;
                    if (y = 54) then
                        -- End frame
                        -- Start vertically visible
                        y <= to_unsigned(0, 6);
                        vblank <= '0';
                    end if;
                end if;
                if ((not bool(hblank)) and (not bool(vblank))) then
                    top := stdl(y = 0);
                    bottom := stdl(y = 49);
                    tx := to_unsigned((signed(resize(x, 8)) - signed(resize(ballx, 9))), 16);
                    ty := to_unsigned((signed(resize(y, 7)) - signed(resize(bally, 8))), 16);
                    ball := stdl((tx < 5) and (ty < 5));
                    pt_ly := to_unsigned((signed(resize(y, 7)) - signed(resize(paddle_ly, 7))), 16);
                    left := stdl((x = 0) and (pt_ly < 12) and ((not bool(paddle_lai)) or (y(0) = '1')));
                    pt_ry := to_unsigned((signed(resize(y, 7)) - signed(resize(paddle_ry, 7))), 16);
                    right := stdl((signed(resize(x, 8)) = (100 - 1)) and (pt_ry < 12) and ((not bool(paddle_rai)) or (y(0) = '1')));
                    net := stdl((signed(resize(x, 8)) = (100 / 2)) and (y(2-1 downto 0) = 0));
                    outcolor <= stdl(bool(top) or bool(bottom) or bool(ball) or bool(left) or bool(right) or bool(net));
                    if ((not bool(colldone)) and bool(ball)) then
                        if (bool(top) or bool(bottom)) then
                            colldone <= '1';
                            balldy <= (-balldy);
                        else
                            if (bool(left) or bool(right)) then
                                colldone <= '1';
                                balldx <= (-balldx);
                            end if;
                            if bool(left) then
                                if (signed(resize(y, 7)) < (signed(resize(paddle_ly, 7)) + (12 / 5))) then
                                    balldy <= to_signed(-1, 2);
                                elsif (signed(resize(y, 7)) > (signed(resize(paddle_ly, 7)) + ((12 - (12 / 5)) - 3))) then
                                    balldy <= to_signed(1, 2);
                                else
                                    balldy <= to_signed(0, 2);
                                end if;
                            elsif bool(right) then
                                if (signed(resize(y, 7)) < (signed(resize(paddle_ry, 7)) + (12 / 5))) then
                                    balldy <= to_signed(-1, 2);
                                elsif (signed(resize(y, 7)) > (signed(resize(paddle_ry, 7)) + ((12 - (12 / 5)) - 3))) then
                                    balldy <= to_signed(1, 2);
                                else
                                    balldy <= to_signed(0, 2);
                                end if;
                            end if;
                        end if;
                    end if;
                end if;
            end if;
            -- Can be asserted multiple times per frame to allow faster movement
            if bool(move_enable) then
                colldone <= '0';
                if ((signed(resize(ballx, 9)) < (105 + 20)) or (signed(resize(ballx, 9)) > ((2 ** 8) - 20))) then
                    ballx <= resize(unsigned(signed(resize(ballx, 9)) + balldx), 8);
                    bally <= resize(unsigned(signed(resize(bally, 8)) + balldy), 7);
                else
                    ballx <= to_unsigned(105 / 2, 8);
                    bally <= to_unsigned(55 / 2, 7);
                    balldx <= tern_op(cond => bool(lsfr(3)), if_true => to_signed(-1, 2), if_false => to_signed(1, 2));
                    balldy <= tern_op(cond => bool(lsfr(1)), if_true => to_signed(1, 2), if_false => tern_op(cond => bool(lsfr(2)), if_true => to_signed(-1, 2), if_false => to_signed(0, 2)));
                end if;
                if bool(switches_num(13)) then
                    paddle_lai <= '1';
                end if;
                if bool(switches_num(12)) then
                    paddle_lai <= '0';
                end if;
                if bool(switches_num(3)) then
                    paddle_rai <= '1';
                end if;
                if bool(switches_num(2)) then
                    paddle_rai <= '0';
                end if;
                lai := stdl(bool(paddle_lai) and (signed(resize(ballx, 9)) < (100 / 2)));
                rai := stdl(bool(paddle_rai) and (signed(resize(ballx, 9)) > (100 / 2)));
                if (((bool(switches_num(15)) and (not bool(switches_num(14)))) or (bool(lai) and ((signed(resize(bally, 8) + 5) - 2) < signed(resize(paddle_ly, 7))))) and (paddle_ly > 1)) then
                    paddle_ly <= (paddle_ly - 1);
                end if;
                if (((bool(switches_num(14)) and (not bool(switches_num(15)))) or (bool(lai) and (signed(resize(bally, 8)) >= (signed(resize(paddle_ly, 7) + 12) - 1)))) and (signed(resize(paddle_ly, 7)) < (50 - 12))) then
                    paddle_ly <= (paddle_ly + 1);
                end if;
                if (((bool(switches_num(1)) and (not bool(switches_num(0)))) or (bool(rai) and ((signed(resize(bally, 8) + 5) - 2) < signed(resize(paddle_ry, 7))))) and (paddle_ry > 1)) then
                    paddle_ry <= (paddle_ry - 1);
                end if;
                if (((bool(switches_num(0)) and (not bool(switches_num(1)))) or (bool(rai) and (signed(resize(bally, 8)) >= (signed(resize(paddle_ry, 7) + 12) - 1)))) and (signed(resize(paddle_ry, 7)) < (50 - 12))) then
                    paddle_ry <= (paddle_ry + 1);
                end if;
            end if;
        end if;
    end if;
end process PONG_MAINLOOP;

end architecture MyHDL;
